Lesson 3 顺序表和链表
1、https://leetcode-cn.com/problems/remove-linked-list-elements/description/ [删除链表中等于给定值 val 的所有节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head == NULL)
        return NULL;
    struct ListNode *p = head;
    struct ListNode *prev = NULL;
    while(p != NULL)
    {
        if(p->val == val)
        {
            struct ListNode *next = p->next;
            if(prev == NULL)
                head = head->next;
            else
                prev->next = p->next;
            free(p);
            p = next;
        }
        else
        {
            prev = p;
            p = p->next;
        }
    }
    return head;
}

2、https://leetcode-cn.com/problems/reverse-linked-list/description/  [反转一个单链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseList(struct ListNode* head)
{
    if(head==NULL || head->next==NULL)
        return head;
    struct ListNode *p = head;
    struct ListNode *q = p->next;
    p->next = NULL;
    while(q != NULL)
    {
        p = q;
        q = q->next;
        p->next = head;
        head = p;
    }
    return head;
}

3、https://leetcode-cn.com/problems/middle-of-the-linked-list/description/  [链表的中间结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* middleNode(struct ListNode* head)
{
    if(head == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

/*
struct ListNode* middleNode(struct ListNode* head)
{
    int len = 0;
    struct ListNode *p = head;
    while(p != NULL)
    {
        len++;
        p = p->next;
    }
    p = head;
    len /= 2;
    while(len-- > 0)
        p = p->next;
    return p;
}
*/

4、https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&&tqId=11167&rp=2&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [输出该链表中倒数第k个结点]
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) 
    {
        if(pListHead == NULL)
            return NULL;
        ListNode *fast, *slow;
        fast = slow = pListHead;
        while(k-- > 0)
        {
            if(fast == NULL)
                return NULL;
            fast = fast->next;
        }
        
        while(fast != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};

5、https://leetcode-cn.com/problems/merge-two-sorted-lists/description/ [合并两个有序链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        if(l1 == NULL)
            return l2;
        else if(l2 == NULL)
            return l1;    

        struct ListNode *head;
        if(l1->val <= l2->val)
        {
            head = l1;
            l1 = l1->next;
        }
        else
        {
            head = l2;
            l2 = l2->next;
        }

        struct ListNode *tail = head;
        while(l1!=NULL && l2!=NULL)
        {
            if(l1->val <= l2->val)
            {
                tail->next = l1;
                l1 = l1->next;
            }
            else
            {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        if(l1 != NULL)
            tail->next= l1;
        if(l2 != NULL)
            tail->next = l2;
        return head;
    }
};

6、https://www.nowcoder.com/practice/0e27e0b064de4eacac178676ef9c9d70?tpId=8&&tqId=11004&rp=2&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking [链表分割]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Partition {
public:
    ListNode* partition(ListNode* pHead, int x) {
        // write code here
        if(pHead == NULL)
            return NULL;
        ListNode *pLessHead, *pLessTail;
        ListNode *pGreatHead, *pGreatTail;
        pLessHead = pLessTail = (ListNode*)malloc(sizeof(ListNode));
        pGreatHead = pGreatHead = (ListNode*)malloc(sizeof(ListNode));
        
        while(pHead != NULL)
        {
            if(pHead->val < x)
            {
                pLessTail->next = pHead;
                pLessTail = pHead;
            }
            else
            {
                pGreatTail->next = pHead;
                pGreatTail = pHead;
            }
            pHead = pHead->next;
        }
        
        pLessTail->next = pGreatHead->next;
        pGreatTail->next = NULL;
        pHead = pLessHead->next;
        
        free(pLessHead);
        free(pGreatHead);
        
        return pHead;
    }
};

7、https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&&tqId=11209&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [删除链表中的重复节点]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(pHead == NULL)
            return NULL;
        ListNode *pre = NULL;
        ListNode *cur = pHead;
        ListNode *next_node = cur->next;
        
        while(next_node != NULL)
        {
            if(cur->val != next_node->val)
            {
                pre = cur;
                cur = next_node;
                next_node = next_node->next;
            }
            else
            {
                while(next_node!=NULL && next_node->val==cur->val)
                    next_node = next_node->next;
                if(pre == NULL)
                    pHead = next_node;
                else
                    pre->next = next_node;
                
                while(cur != next_node)
                {
                    ListNode *p = cur;
                    cur = cur->next;
                    free(p);
                }
                
                if(next_node != NULL)
                    next_node = next_node->next;
            }
        }
        
        return pHead;
    }
};

8、https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking [链表的回文结构]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) 
    {
        // write code here
        if(A==NULL || A->next==NULL)
            return true;
        int ar[900] = {0};
        ListNode *p = A;
        int i = 0;
        while(p != NULL)
        {
            ar[i++] = p->val;
            p = p->next;
        }
        
        int start = 0;
        int end = i-1;
        while(start < end)
        {
            if(ar[start] != ar[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
};


9、https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/ [相交链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int GetListLen(ListNode *head)
    {
        int len = 0;
        while(head != NULL)
        {
            len++;
            head = head->next;
        }
        return len;
    }

    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA = GetListLen(headA);
        int lenB = GetListLen(headB);
        if(lenA==0 || lenB==0)
            return NULL;
        
        ListNode *longHead, *shortHead;
        int step = 0;
        if(lenA > lenB)
        {
            longHead = headA;
            shortHead = headB;
            step = lenA - lenB;
        }
        else
        {
            longHead = headB;
            shortHead = headA;
            step = lenB - lenA;
        }

        while(step-- != 0)
            longHead = longHead->next;
        
        while(shortHead!=NULL && longHead!=NULL)
        {
            if(shortHead == longHead)
                return shortHead;
            shortHead = shortHead->next;
            longHead = longHead->next;            
        }
        return NULL;
    }
};


10、https://leetcode-cn.com/problems/linked-list-cycle/description/ [环形链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    if(head == NULL)
        return false;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast!=NULL && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            return true;
    }
    return false;
}

11、https://leetcode-cn.com/problems/linked-list-cycle-ii/submissions/ [求环形链表的入口节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) {
    if(head == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast!=NULL && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            break;
    }
    if(fast==NULL || fast->next==NULL)
        return NULL;
    
    fast = head;
    while(fast != slow)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return fast;
}

Lesson 4 栈和队列
1、https://leetcode-cn.com/problems/valid-parentheses/  [括号匹配问题]

typedef char ElemType;
typedef struct LinkStackNode
{
	ElemType data;
	struct LinkStackNode *link;
}LinkStackNode;

typedef LinkStackNode* LinkStack;
void LinkStackInit(LinkStack *pst);
void LinkStackPush(LinkStack *pst, ElemType x);
void LinkStackPop(LinkStack *pst);
ElemType LinkStackTop(LinkStack *pst);
int LinkStackSize(LinkStack *pst);
bool LinkStackEmpty(LinkStack *pst);
void LinkStackDestroy(LinkStack *pst);
/////////////////////////////////////////////////////

void LinkStackInit(LinkStack *pst)
{
	assert(pst != NULL);
	*pst = NULL;
}

void LinkStackPush(LinkStack *pst, ElemType x)
{
	assert(pst != NULL);
	LinkStackNode *node = (LinkStackNode*)malloc(sizeof(LinkStackNode));
	assert(node != NULL);
	node->data = x;

	node->link = *pst;
	*pst = node;
}
void LinkStackPop(LinkStack *pst)
{
	assert(pst != NULL);
	if(*pst != NULL)
	{
		LinkStackNode *p = *pst;
		*pst = p->link;
		free(p);
	}
}
ElemType LinkStackTop(LinkStack *pst)
{
	assert(pst != NULL && *pst != NULL);
	return (*pst)->data;
}

int LinkStackSize(LinkStack *pst)
{
	assert(pst != NULL);
	int size = 0;
	LinkStackNode *p = *pst;
	while(p != NULL)
	{
		size++;
		p = p->link;
	}
	return size;
}

bool LinkStackEmpty(LinkStack *pst)
{
    assert(pst != NULL);
    return *pst == NULL;
}

void LinkStackDestroy(LinkStack *pst)
{
	assert(pst != NULL);
	LinkStackNode *p = *pst;
	while(p != NULL)
	{
		*pst = p->link;
		free(p);
		p = *pst;
	}
}
//////////////////////////////////////////////////////////////

bool isValid(char * s)
{
    if(s == NULL)
        return false;
    if(*s == '\0')
        return true;

    LinkStack st;
    LinkStackInit(&st);

    while(*s != '\0')
    {
        if(*s=='{' || *s=='[' || *s=='(')
            LinkStackPush(&st, *s);
        else
        {
            if(LinkStackEmpty(&st))
				return false;
            char top = LinkStackTop(&st);
            if((*s=='}'&&top!='{') || (*s==']'&&top!='[') || (*s==')'&&top!='('))
                return false;
            LinkStackPop(&st);
        }
        s++;
    }
    bool flag = LinkStackEmpty(&st);
    LinkStackDestroy(&st);
    return flag;
}

2、https://leetcode-cn.com/problems/implement-stack-using-queues/   [用队列实现栈]

typedef int ElemType;
typedef struct LinkQueueNode
{
	ElemType data;
	struct LinkQueueNode *link;
}LinkQueueNode;

typedef struct LinkQueue
{
	LinkQueueNode *head; // 队头指针
	LinkQueueNode *tail; // 队尾指针
}LinkQueue;

void LinkQueueInit(LinkQueue *pq);
void LinkQueueEn(LinkQueue *pq, ElemType x);
void LinkQueueDe(LinkQueue *pq);
ElemType LinkQueueFront(LinkQueue *pq);
ElemType LinkQueueBack(LinkQueue *pq);
int LinkQueueSize(LinkQueue *pq);
bool LinkQueueEmpty(LinkQueue *pq);
void LinkQueueDestroy(LinkQueue *pq);
/////////////////////////////////////////////////////
void LinkQueueInit(LinkQueue *pq)
{
	assert(pq != NULL);
	pq->head = pq->tail = NULL;
}

void LinkQueueEn(LinkQueue *pq, ElemType x)
{
	assert(pq != NULL);
	LinkQueueNode *node = (LinkQueueNode*)malloc(sizeof(LinkQueueNode));
	assert(node != NULL);
	node->data = x;
	node->link = NULL;
	if(pq->head == NULL)
		pq->head = pq->tail = node;
	else
	{
		pq->tail->link = node;
		pq->tail = node;
	}
}
void LinkQueueDe(LinkQueue *pq)
{
	assert(pq != NULL);
	if(pq->head != NULL)
	{
		LinkQueueNode *p = pq->head;
		if(pq->head == pq->tail)
			pq->head = pq->tail = NULL;
		else
			pq->head = p->link;
		free(p);
	}
}
ElemType LinkQueueFront(LinkQueue *pq)
{
	assert(pq != NULL);
	assert(pq->head != NULL);
	return pq->head->data;  //return pq->tail->data
}

ElemType LinkQueueBack(LinkQueue *pq)
{
    assert(pq != NULL);
	assert(pq->head != NULL);
	return pq->tail->data;  //return pq->tail->data
}

int LinkQueueSize(LinkQueue *pq)
{
	assert(pq != NULL);
	int size = 0;
	LinkQueueNode *p = pq->head;
	while(p != NULL)
	{
		size++;
		p = p->link;
	}
	return size;
}
bool LinkQueueEmpty(LinkQueue *pq)
{
	assert(pq != NULL);
	return pq->head == NULL;
}

void LinkQueueDestroy(LinkQueue *pq)
{
	assert(pq != NULL);
	LinkQueueNode *p = pq->head;
	while(p != NULL)
	{
		pq->head = p->link;
		free(p);
		p = pq->head;
	}
}

///////////////////////////////////////////////////////////////////////////////////
typedef struct {
    LinkQueue q1;
    LinkQueue q2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() {
    MyStack *pst = (MyStack*)malloc(sizeof(MyStack));
    LinkQueueInit(&(pst->q1));
    LinkQueueInit(&(pst->q2));
    return pst;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) {
    LinkQueue *pnoempty;
    if(LinkQueueEmpty(&(obj->q1)))
        pnoempty = &(obj->q2);
    else
        pnoempty = &(obj->q1);
    
    LinkQueueEn(pnoempty, x);
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) {
    LinkQueue *pempty, *pnoempty;
    if(LinkQueueEmpty(&(obj->q1)))
    {
        pempty = &(obj->q1);
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
        pempty = &(obj->q2);        
    }

    ElemType val; 
    while(!LinkQueueEmpty(pnoempty))
    {
        val = LinkQueueFront(pnoempty);
        LinkQueueDe(pnoempty);
        if(LinkQueueEmpty(pnoempty))
            break;
        LinkQueueEn(pempty, val);
    }
    return val;
}

/** Get the top element. */
int myStackTop(MyStack* obj) {
    LinkQueue *pnoempty;
    if(!LinkQueueEmpty(&(obj->q1)))
        pnoempty = &(obj->q1);
    else
        pnoempty = &(obj->q2);

    return LinkQueueBack(pnoempty);
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) {
    return LinkQueueEmpty(&(obj->q1)) && LinkQueueEmpty(&(obj->q2));
}

void myStackFree(MyStack* obj) {
    LinkQueueDestroy(&(obj->q1));
    LinkQueueDestroy(&(obj->q2));
    free(obj);
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/

3、https://leetcode-cn.com/problems/implement-queue-using-stacks/ [用栈实现队列]
typedef char ElemType;
typedef struct LinkStackNode
{
	ElemType data;
	struct LinkStackNode *link;
}LinkStackNode;

typedef LinkStackNode* LinkStack;
void LinkStackInit(LinkStack *pst);
void LinkStackPush(LinkStack *pst, ElemType x);
void LinkStackPop(LinkStack *pst);
ElemType LinkStackTop(LinkStack *pst);
int LinkStackSize(LinkStack *pst);
bool LinkStackEmpty(LinkStack *pst);
void LinkStackDestroy(LinkStack *pst);
/////////////////////////////////////////////////////

void LinkStackInit(LinkStack *pst)
{
	assert(pst != NULL);
	*pst = NULL;
}

void LinkStackPush(LinkStack *pst, ElemType x)
{
	assert(pst != NULL);
	LinkStackNode *node = (LinkStackNode*)malloc(sizeof(LinkStackNode));
	assert(node != NULL);
	node->data = x;

	node->link = *pst;
	*pst = node;
}
void LinkStackPop(LinkStack *pst)
{
	assert(pst != NULL);
	if(*pst != NULL)
	{
		LinkStackNode *p = *pst;
		*pst = p->link;
		free(p);
	}
}
ElemType LinkStackTop(LinkStack *pst)
{
	assert(pst != NULL && *pst != NULL);
	return (*pst)->data;
}

int LinkStackSize(LinkStack *pst)
{
	assert(pst != NULL);
	int size = 0;
	LinkStackNode *p = *pst;
	while(p != NULL)
	{
		size++;
		p = p->link;
	}
	return size;
}

bool LinkStackEmpty(LinkStack *pst)
{
    assert(pst != NULL);
    return *pst == NULL;
}

void LinkStackDestroy(LinkStack *pst)
{
	assert(pst != NULL);
	LinkStackNode *p = *pst;
	while(p != NULL)
	{
		*pst = p->link;
		free(p);
		p = *pst;
	}
}

///////////////////////////////////////////////////////////////////////////////////
typedef struct {
    LinkStack instack;
    LinkStack outstack;
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() {
    MyQueue *pq = (MyQueue *)malloc(sizeof(MyQueue));
    LinkStackInit(&(pq->instack));
    LinkStackInit(&(pq->outstack));
    return pq;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {
    LinkStackPush(&(obj->instack), x);
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) {
    if(LinkStackEmpty(&(obj->outstack)))
    {
        while(!LinkStackEmpty(&(obj->instack)))
        {
            LinkStackPush(&(obj->outstack), LinkStackTop(&(obj->instack)));
            LinkStackPop(&(obj->instack));
        }
    }
    ElemType val = LinkStackTop(&(obj->outstack));
    LinkStackPop(&(obj->outstack));
    return val;
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) {
    if(LinkStackEmpty(&(obj->outstack)))
    {
        while(!LinkStackEmpty(&(obj->instack)))
        {
            LinkStackPush(&(obj->outstack), LinkStackTop(&(obj->instack)));
            LinkStackPop(&(obj->instack));
        }
    }
    ElemType val = LinkStackTop(&(obj->outstack));
    return val;
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) {
    return LinkStackEmpty(&(obj->instack)) && LinkStackEmpty(&(obj->outstack));
}

void myQueueFree(MyQueue* obj) {
    LinkStackDestroy(&(obj->instack));
    LinkStackDestroy(&(obj->outstack));
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/

4、https://leetcode-cn.com/problems/min-stack/ [实现一个最小栈]

typedef int ElemType;
typedef struct LinkStackNode
{
	ElemType data;
	struct LinkStackNode *link;
}LinkStackNode;

typedef LinkStackNode* LinkStack;
void LinkStackInit(LinkStack *pst);
void LinkStackPush(LinkStack *pst, ElemType x);
void LinkStackPop(LinkStack *pst);
ElemType LinkStackTop(LinkStack *pst);
int LinkStackSize(LinkStack *pst);
bool LinkStackEmpty(LinkStack *pst);
void LinkStackDestroy(LinkStack *pst);
/////////////////////////////////////////////////////

void LinkStackInit(LinkStack *pst)
{
	assert(pst != NULL);
	*pst = NULL;
}

void LinkStackPush(LinkStack *pst, ElemType x)
{
	assert(pst != NULL);
	LinkStackNode *node = (LinkStackNode*)malloc(sizeof(LinkStackNode));
	assert(node != NULL);
	node->data = x;

	node->link = *pst;
	*pst = node;
}
void LinkStackPop(LinkStack *pst)
{
	assert(pst != NULL);
	if(*pst != NULL)
	{
		LinkStackNode *p = *pst;
		*pst = p->link;
		free(p);
	}
}
ElemType LinkStackTop(LinkStack *pst)
{
	assert(pst != NULL && *pst != NULL);
	return (*pst)->data;
}

int LinkStackSize(LinkStack *pst)
{
	assert(pst != NULL);
	int size = 0;
	LinkStackNode *p = *pst;
	while(p != NULL)
	{
		size++;
		p = p->link;
	}
	return size;
}

bool LinkStackEmpty(LinkStack *pst)
{
    assert(pst != NULL);
    return *pst == NULL;
}

void LinkStackDestroy(LinkStack *pst)
{
	assert(pst != NULL);
	LinkStackNode *p = *pst;
	while(p != NULL)
	{
		*pst = p->link;
		free(p);
		p = *pst;
	}
}

//////////////////////////////////////////////////////////

typedef struct {
    LinkStack st;
    LinkStack min_st;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() {
    MinStack *pst = (MinStack*)malloc(sizeof(MinStack));
    LinkStackInit(&(pst->st));
    LinkStackInit(&(pst->min_st));
    return pst;
}

void minStackPush(MinStack* obj, int x) {
    LinkStackPush(&(obj->st), x);
    if(LinkStackEmpty(&(obj->min_st)) || x<=LinkStackTop(&(obj->min_st)))
        LinkStackPush(&(obj->min_st), x);
}

void minStackPop(MinStack* obj) {
    ElemType topval = LinkStackTop(&(obj->st));
    LinkStackPop(&(obj->st));
    if(topval == LinkStackTop(&(obj->min_st)))
        LinkStackPop(&(obj->min_st));
}

int minStackTop(MinStack* obj) {
    return LinkStackTop(&(obj->st));
}

int minStackGetMin(MinStack* obj) {
    return LinkStackTop(&(obj->min_st));
}

void minStackFree(MinStack* obj) {
    LinkStackDestroy(&(obj->st));
    LinkStackDestroy(&(obj->min_st));
    free(obj);
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/

5、https://leetcode-cn.com/problems/design-circular-queue/ [设计循环队列]
typedef struct {
    int *base;
    int  capacity;
    int  front;
    int  rear;
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */

MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue *pcq = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    pcq->base = (int*)malloc(sizeof(int) * (k+1));
    pcq->capacity = k;
    pcq->front = pcq->rear = 0;
    return pcq;
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->front == obj->rear;
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return ((obj->rear+1)%(obj->capacity+1)) == obj->front;
}

/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if(myCircularQueueIsFull(obj))
        return false;
    obj->base[obj->rear] = value;
    obj->rear = (obj->rear+1) % (obj->capacity+1);
    return true;
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
        return false;
    obj->front = (obj->front+1) % (obj->capacity+1);
    return true;
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
        return -1;
    
    return obj->base[obj->front];
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[(obj->rear-1+(obj->capacity+1)) % (obj->capacity+1)];
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->base);
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/


Lesson 5 二叉树
1、https://leetcode-cn.com/problems/binary-tree-preorder-traversal/ [二叉树的前序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int Size(struct TreeNode *t)
{
    if(t == NULL)
        return 0;
    else
        return Size(t->left) + Size(t->right) + 1;
}

void _preorderTraversal(struct TreeNode* root, int *preorder, int *i)
{
    if(root != NULL)
    {
        preorder[*i] = root->val;
        (*i)++;
        _preorderTraversal(root->left, preorder, i);
        _preorderTraversal(root->right, preorder, i);
    }
}

int* preorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = Size(root);
    if(n == 0)
    {
        *returnSize = 0;
        return NULL;
    }
    *returnSize = n;
    int *preorder = (int *)malloc(sizeof(int) * n);
    int i = 0;
    _preorderTraversal(root, preorder, &i);
    return preorder;
}


2、https://leetcode-cn.com/problems/binary-tree-inorder-traversal/ [二叉树中序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int Size(struct TreeNode *t)
{
    if(t == NULL)
        return 0;
    else
        return Size(t->left) + Size(t->right) + 1;
}

void _inorderTraversal(struct TreeNode* root, int *inorder, int *i)
{
    if(root != NULL)
    {
         _inorderTraversal(root->left, inorder, i);
        inorder[*i] = root->val;
        (*i)++;
        _inorderTraversal(root->right, inorder, i);
    }
}

int* inorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = Size(root);
    if(n == 0)
    {
        *returnSize = 0;
        return NULL;
    }
    *returnSize = n;
    int *inorder = (int *)malloc(sizeof(int) * n);
    int i = 0;
    _inorderTraversal(root, inorder, &i);
    return inorder;
}

3、https://leetcode-cn.com/problems/binary-tree-postorder-traversal/ [二叉树的后序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int Size(struct TreeNode *t)
{
    if(t == NULL)
        return 0;
    else
        return Size(t->left) + Size(t->right) + 1;
}
void _postorderTraversal(struct TreeNode *root, int *postorder, int *i)
{
    if(root != NULL)
    {
        _postorderTraversal(root->left, postorder, i);
        _postorderTraversal(root->right, postorder, i);
        postorder[*i] = root->val;
        (*i)++;
    }
}
int* postorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = Size(root);
    if(n == 0)
    {
        *returnSize = 0;
        return NULL;
    }

    *returnSize = n;
    int *postorder = (int*)malloc(sizeof(int) * n);
    int i = 0;
    _postorderTraversal(root, postorder, &i);
    return postorder;
}

4、https://leetcode-cn.com/problems/same-tree/ [检查两颗树是否相同]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


bool isSameTree(struct TreeNode* p, struct TreeNode* q)
{
    if(p==NULL && q==NULL)
        return true;
    if(p==NULL || q==NULL)
        return false;
    return (p->val==q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
}

5、https://leetcode-cn.com/problems/subtree-of-another-tree/ [另一颗树的子树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isSameTree(struct TreeNode* p, struct TreeNode* q)
{
    if(p==NULL && q==NULL)
        return true;
    if(p==NULL || q==NULL)
        return false;
    return (p->val==q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
}

bool isSubtree(struct TreeNode* s, struct TreeNode* t)
{
    if(t == NULL)
        return true;
    if(s == NULL)
        return false;
    
    if(isSameTree(s, t))
        return true;
    return isSubtree(s->left, t) || isSubtree(s->right, t);
}

6、https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/ [二叉树的最大深度]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


int maxDepth(struct TreeNode* root)
{
    if(root == NULL)
        return 0;
    else
    {
        int left_h = maxDepth(root->left);
        int right_h = maxDepth(root->right);
        return (left_h>right_h?left_h:right_h)+1;        
    }
}

7、https://leetcode-cn.com/problems/balanced-binary-tree/ [判断一颗二叉树是否是平衡二叉树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


int maxDepth(struct TreeNode* root)
{
    if(root == NULL)
        return 0;
    else
    {
        int left_h = maxDepth(root->left);
        int right_h = maxDepth(root->right);
        return (left_h>right_h?left_h:right_h)+1;        
    }
}

bool isBalanced(struct TreeNode* root){
    if(root == NULL)
        return true;
    
    int left_h = maxDepth(root->left);
    int right_h = maxDepth(root->right);

    return abs(left_h-right_h)<2 && isBalanced(root->left) && isBalanced(root->right);
}


8、https://leetcode-cn.com/problems/symmetric-tree/ [对称二叉树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool _isSymmetric(struct TreeNode *t1, struct TreeNode *t2)
{
    if(t1==NULL && t2==NULL)
        return true;
    if(t1==NULL || t2==NULL)
        return false;
    return (t1->val==t2->val)
            && _isSymmetric(t1->left, t2->right)
            && _isSymmetric(t1->right, t2->left);
}

bool isSymmetric(struct TreeNode* root)
{
    if(root == NULL)
        return true;
    
    return _isSymmetric(root->left, root->right);
}

9、https://www.nowcoder.com/practice/4b91205483694f449f94c179883c1fef?tpId=60&&tqId=29483&rp=1&ru=/activity/oj&qru=/ta/tsing-kaoyan/question-ranking [二叉树的构建及遍历]
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>

typedef struct BinTreeNode
{
    char val;
    struct BinTreeNode *left;
    struct BinTreeNode *right;
}BinTreeNode;

typedef struct BinTreeNode* BinTree;

BinTree CreateBinTree(const char *str, int *i)
{
    if(str[*i]=='#' || str[*i]=='\0')
        return NULL;
    else
    {
        BinTreeNode *t = (BinTreeNode*)malloc(sizeof(BinTreeNode));
        assert(t != NULL);
        t->val = str[*i];
        (*i)++;
        t->left = CreateBinTree(str, i);
        (*i)++;
        t->right = CreateBinTree(str, i);
        return t;
    }
}

void InOrder(BinTree t)
{
    if(t != NULL)
    {
        InOrder(t->left);
        printf("%c ", t->val);
        InOrder(t->right);
    }
}

int main()
{
    BinTree bt;
    char str[100] = {0};
    scanf("%s", str);
    
    int i = 0;
    bt = CreateBinTree(str, &i);
    InOrder(bt);
    
    return 0;
}


二叉树的进阶OJ题
1、https://leetcode-cn.com/problems/construct-string-from-binary-tree/ [二叉树创建字符串]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
void _tree2str(struct TreeNode *t, char *str)
{
    if(t == NULL)
        return;
    char buf[10] = {0};
    sprintf(buf, "%d", t->val);
    strcat(str, buf);

    if(t->left == NULL)
    {
        if(t->right != NULL)
            strcat(str, "()");
        else
            return;
    }
    else
    {
        strcat(str,"(");
        _tree2str(t->left, str);
        strcat(str, ")");
    }

    if(t->right == NULL)
        return;
    else
    {
        strcat(str, "(");
        _tree2str(t->right, str);
        strcat(str, ")");
    }
}

char * tree2str(struct TreeNode* t)
{
    int n = 100000;
    char *str = (char *)malloc(sizeof(char) * n);
    memset(str, 0, n);

    //tree to str
    _tree2str(t, str);

    return str;
}

2、https://leetcode-cn.com/problems/binary-tree-level-order-traversal/ [二叉树的分层遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int height(struct TreeNode *root)
{
    if(root == NULL)
        return 0;
    else
    {
        int left_h = height(root->left);
        int right_h = height(root->right);
        return (left_h>right_h?left_h:right_h)+1;
    }
}

int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes)
{
    if(root == NULL)
    {
        *returnSize = 0;
        return NULL;        
    }

    int max_level = height(root);
    *returnSize = max_level;

    int **levelArray = (int**)malloc(sizeof(int*)*max_level);
    *returnColumnSizes = (int*)malloc(sizeof(int) * max_level);

    struct TreeNode* q1[1000], *q2[1000];
    int q1_size = 0, q2_size = 0;

    //先把根入队
    q1[0] = root;
    q1_size++;

    int level = 0;
    while(level < max_level)
    {
        levelArray[level] = (int*)malloc(sizeof(int) * q1_size);
        for(int i=0; i<q1_size; ++i)
            levelArray[level][i] = q1[i]->val;
        (*returnColumnSizes)[level] = q1_size;

        for(int i=0; i<q1_size; ++i)
        {
            if(q1[i]->left != NULL)
                q2[q2_size++] = q1[i]->left;
            if(q1[i]->right != NULL)
                q2[q2_size++] = q1[i]->right;
        }

        memcpy(q1, q2, sizeof(struct TreeNode*) * q2_size);
        q1_size = q2_size;
        q2_size = 0;
        level++;
    }
    return levelArray;
}


3、https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/ [最近公共祖先]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool findNode(struct TreeNode *t, struct TreeNode *p)
{
    if(t == NULL)
        return false;
    if(p == t)
        return true;
    return findNode(t->left, p) || findNode(t->right, p);
}

struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) 
{
    if(root == NULL)    
        return NULL;
    if(p==root || q==root)
        return root;
    
    bool pInleft, pInright, qInleft, qInright;
    if(findNode(root->left, p))
    {
        pInleft = true;
        pInright = false;
    }
    else
    {
        pInleft = false;
        pInright = true;
    }

    if(findNode(root->right, q))
    {
        qInleft = false;
        qInright = true;
    }
    else
    {
        qInleft = true;
        qInright = false;
    }

    if(pInleft && qInleft)
        return lowestCommonAncestor(root->left, p, q);
    else if(pInright && qInright)
        return lowestCommonAncestor(root->right, p, q);
    
    return root;
}


4、https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&&tqId=11179&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [二叉树转换排序双向链表]
/**
 * struct TreeNode {
 *	int val;
 *	struct TreeNode *left;
 *	struct TreeNode *right;
 * };
 */

/**
 * 
 * @param pRootOfTree TreeNode类 
 * @return TreeNode类
 */
void ConvertList(struct TreeNode *t, struct TreeNode **pre)
{
    if(t == NULL)
        return;
    ConvertList(t->left, pre);
    t->left = *pre;
    if(*pre != NULL)
        (*pre)->right = t;
    *pre = t;
    ConvertList(t->right, pre);
}

struct TreeNode* Convert(struct TreeNode* pRootOfTree )
{
    // write code here
    if(pRootOfTree == NULL)
            return NULL;
    struct TreeNode *pre = NULL;
    ConvertList(pRootOfTree, &pre);
    
    struct TreeNode *pHead = pre;
    while(pHead->left != NULL)
        pHead = pHead->left;
    return pHead;
}

5、https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/ [根据前序和中序创建二叉树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


struct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize)
{
    if(preorderSize == 0)
        return NULL;
    
    int k = 0;
    while(inorder[k] != preorder[0])
        k++;
    
    struct TreeNode *t = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    assert(t != NULL);
    t->val = inorder[k];

    t->left = buildTree(preorder+1, k, inorder, k);
    t->right = buildTree(preorder+k+1, preorderSize-k-1, inorder+k+1, inorderSize-k-1);
    return t;
}




















